@using PizzaShop.Domain.ViewModels
@model PizzaShop.Domain.ViewModels.CategoryViewModel;


<div class="add-user-back">
  <div class="mt-3 me-3 ms-4 d-flex flex-column">
    <div class="d-flex justify-content-between">
      <h2>Menu</h2>
    </div>
    <div class="nav  shadow-lg mt-5 mx-2" id="nav-tab" role="tablist">

      <button class="nav-link active text-black" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-home"
        aria-controls="nav-home" aria-selected="true"><img src="./images/menu-black.svg" alt="" class="sidebar-svg">
        Items</button>
      <button class="nav-link text-black" id="nav-profile-tab" data-bs-toggle="tab" data-bs-target="#nav-profile"
        aria-controls="nav-profile" aria-selected="false"> <img src="./images/black-modifier.svg" alt=""
          class="menu-page-svg"> Modifiers</button>
    </div>
    <div id="partialView">
      <partial name="_CategoryItems" model="Model" />
    </div>
  </div>
</div>


<div class="modal fade" id="addCategory" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
  aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">Add Category</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addCategoryForm">
          <div class="d-flex flex-column">
            <div class="form-floating my-2 mx-2">
              <input type="text" class="form-control" id="category-name" asp-for="CategoryName" name="CategoryName"
                placeholder="Pasta">
              <label for="name">Name*</label>
            </div>
            <div class="form-floating my-2 mx-2">
              <input type="text" class="form-control" asp-for="Description" name="Description"
                placeholder="This is the description of pasta" id="category-description"></input>
              <label for="description">Description*</label>
            </div>
          </div>
          <div class="modal-footer">
            <button type="submit" class="btn btn-primary">AddCategory</button>
          </div>
        </form>

      </div>

    </div>
  </div>
</div>


<div class="modal fade" id="editCategory" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
  aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">Edit Category</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editCategoryForm">
          <div class="d-flex flex-column">
            <div class="form-floating my-2 mx-2">
              <input type="text" class="form-control" id="edit-category-name" asp-for="CategoryName" name="CategoryName"
                placeholder="Pasta">
              <label for="name">Name*</label>
            </div>
            <div class="form-floating my-2 mx-2">
              <input type="text" class="form-control" asp-for="Description" name="Description"
                placeholder="This is the description of pasta" id="edit-category-description"></input>
              <label for="description">Description*</label>
            </div>
            <span class="d-none" id="edit-category-id"></span>
          </div>
          <div class="modal-footer">
            <button type="submit" class="btn btn-primary">Save</button>
          </div>
        </form>

      </div>

    </div>
  </div>
</div>

<div class="modal fade" id="deleteModel" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
  aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">
          Delete Confirmation
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="d-flex flex-column align-items-center justify-content-center">
          <img src="./images/warning.svg" alt="" class="popup-svg" />
          <p>Are you sure you want to delete this user?</p>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          No
        </button>
        <button type="button" class="btn btn-primary" id="deleteButton" data-bs-dismiss="modal">Yes</button>
      </div>
    </div>
  </div>
</div>

<div id="partial-addItem-modal">
  <partial name="_ItemModal" model="@Model"/>
 </div>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<script src="~/js/menu.js" asp-append-version="true"></script>
<script>

  function getmodifiergroupList() {
  const selectElement = document.getElementById('ModifierSelect');
  const customMultiSelect = document.querySelector('.custom-multi-select');
  const dropdownOptions = customMultiSelect.querySelector('.dropdown-options');
  const selectedTagsContainer = customMultiSelect.querySelector('.selected-tags');
  const searchInput = customMultiSelect.querySelector('.search-input');
  const clearAllButton = customMultiSelect.querySelector('.clear-all');
  const dropdownToggle = customMultiSelect.querySelector('.dropdown-toggle');

  
  selectElement.querySelectorAll('option').forEach(option => {
    const value = option.value;
    const text = option.textContent;

    const customOption = document.createElement('div');
    customOption.className = 'option';
    customOption.setAttribute('data-value', value);
    customOption.innerHTML = `
      <input type="checkbox" id=${value} onchange="getSelectedValues(id)">
      <label for="custom-option-${value}">${text}</label>
    `;

 
    dropdownOptions.appendChild(customOption);


    const checkbox = customOption.querySelector('input[type="checkbox"]');
    checkbox.addEventListener('change', () => {
      if (checkbox.checked) {
        option.selected = true; 
        addTag(value, text); 
      } else {
        option.selected = false; 
        removeTag(value); 
      }
    });
  });


  function addTag(value, text) {
    const tag = document.createElement('div');
    tag.className = 'tag';
    tag.setAttribute('data-value', value);
    tag.innerHTML = `
      ${text}
      <span class="tag-delete"></span>
    `;

    
    selectedTagsContainer.appendChild(tag);

    
    tag.querySelector('.tag-delete').addEventListener('click', () => {
      tag.remove();
      const option = selectElement.querySelector(`option[value="${value}"]`);
      if (option) {
        option.selected = false;
      }
      const checkbox = dropdownOptions.querySelector(`input[id="custom-option-${value}"]`);
      if (checkbox) {
        checkbox.checked = false; 
      }
    });
  }

 
  function removeTag(value) {
    const tag = selectedTagsContainer.querySelector(`[data-value="${value}"]`);
    if (tag) {
      tag.remove();
    }
  }

 
  clearAllButton.addEventListener('click', () => {
    selectedTagsContainer.innerHTML = '';
    selectElement.querySelectorAll('option').forEach(option => {
      option.selected = false; 
    });
    dropdownOptions.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
      checkbox.checked = false; 
    });
  });

 
  searchInput.addEventListener('focus', () => {
    dropdownOptions.style.display = 'block';
  });

  searchInput.addEventListener('blur', () => {
    setTimeout(() => {
      dropdownOptions.style.display = 'none';
    }, 200);
  });

  @* dropdownToggle.addEventListener('click', () => {
    dropdownOptions.style.display = dropdownOptions.style.display === 'block' ? 'none' : 'block';
  }); *@
  
}


  function removeTag(value) {
    const customMultiSelect = document.querySelector('.custom-multi-select');
    const selectedTagsContainer = customMultiSelect.querySelector('.selected-tags');
    const tag = selectedTagsContainer.querySelector(`[data-value="${value}"]`);
      if (tag) {
        tag.remove();
      }
  }

function getSelectedValues(id) {
  id = parseInt(id);
  console.log(id);
  debugger
  var checked = document.getElementById(id).checked
  if(checked){
    modifierMaximumMinimumList.push({Id:id,minValue:0,maxValue:0})
  }else{
    modifierMaximumMinimumList = modifierMaximumMinimumList.filter(item=> item.id != id);
    console.log(modifierMaximumMinimumList)
  }
   console.log(modifierMaximumMinimumList)
  var selectedItemsString=JSON.stringify(modifierMaximumMinimumList);
  var modMaxMinList=modfierMaxMinList();
  $.ajax({
    type: "GET",
    url: "/Menu/selectModifier",
    contentType: "application/json",
    data: {selectedItems:selectedItemsString},
    success: function(data){
      $('#partialviewstart').html(data);
      modifierMaximumMinimumList.forEach(obj => {
        var minSelect = document.getElementById(`MinValue${obj.Id}`);
        var maxSelect = document.getElementById(`MaxValue${obj.Id}`);
        if (minSelect) minSelect.value = obj.minValue;
        if (maxSelect) maxSelect.value = obj.maxValue;
      });
    }
  });

}

let minValues=[];
let maxValues=[];


function getMinimumValueList(id, value) {
  let defaultMinMod=modifierMaximumMinimumList.find(item => item.Id ==id);
  defaultMinMod.minValue=value;
}

 
function getMaximumValueList(id, value) {
  let defaultMaxMod=modifierMaximumMinimumList.find(item => item.Id ==id);
      defaultMaxMod.maxValue=value;
      console.log(modifierMaximumMinimumList);
}

let modifierMaximumMinimumList=[];
function modfierMaxMinList()
{
  return modifierMaximumMinimumList;
}

function deleteItem(id) {
  modifierMaximumMinimumList = modifierMaximumMinimumList.filter(item=> item.Id !== id);
  document.getElementById(id).checked = false;
  removeTag(id)
  var selectedItemsString=JSON.stringify(modifierMaximumMinimumList);
  $.ajax({
    type: "GET",
    url: "/Menu/selectModifier",
    contentType: "application/json",
    data: {selectedItems:selectedItemsString},
    success: function(data){
      $('#partialviewstart').html(data);
      modifierMaximumMinimumList.forEach(obj => {
        var minSelect = document.getElementById(`MinValue${obj.Id}`);
        var maxSelect = document.getElementById(`MaxValue${obj.Id}`);
        if (minSelect) minSelect.value = obj.minValue;
        if (maxSelect) maxSelect.value = obj.maxValue;
      });
    }
  });
}


$("#addItem-Form").submit(function(e){
    e.preventDefault();
    var modMaxMinList=modfierMaxMinList();
    $("#selected-modifier-groups").val(JSON.stringify(modMaxMinList));
    var addItemForm=$(this)[0];
    var formData = new FormData(addItemForm);
    console.log( $("#selected-modifier-groups").val())
    console.log(formData);
    $.ajax({
        url: '/Menu/AddItem',
        type: 'POST',
        data: formData,
        processData: false, 
        contentType: false, 
        success: function (data) {
            if (data.success) {
                toastr.success(data.message);
                setTimeout(function () {
                    window.location.href = '/Menu';
                }, 1000);
            } else {
                toastr.error(data.message);
            }
        },
        error: function (error) {
            toastr.error('An error occurred while processing your request');
        }
    });
  });


 function editMenuItem(id)
{
  
  console.log(id);
  id=JSON.stringify(id);
  $.ajax({
    url:'Menu/EditMenuItem',
    method:'GET',
    contentType:'application/json',
    data:{id:id},
    success:function(data)
    {
       $("#partial-addItem-modal").html(data);
       getmodifiergroupList();
       bindEditChanges();
       console.log(modifierMaximumMinimumList)
       $("#addItem").modal('show');
    },
    error:function(data)
    {
      $("#partial-addItem-modal").html(data);
      $("#addItem").modal('show');
      console.log("aksjdasd");
    }

  });
}

</script>